class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n=nums.size();
        if(n==1)return 0;
        if(nums[0]>nums[1])return 0;
        if(nums[n-2]<nums[n-1])return n-1;;
        int low=1,high=n-2;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1]){
                return mid;
            }
            else if(nums[mid]>nums[mid+1]){
                high=mid-1;
            }
            else if(nums[mid]>nums[mid-1]){
                low=mid+1;
            }
            //this is becz if the mid will be on the oppsite of peak so either on the 
            //left side we can go or on right side both side will have a peak
            else{
                low=mid+1;
            }
        }
        return -1;
        
    }
};
